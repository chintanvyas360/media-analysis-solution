AWSTemplateFormatVersion: "2010-09-09"
Description: (SO0042) %%SOLUTION_NAME%% - The %%SOLUTION_NAME%% is a serverless solution that leverages managed AWS services to automatically analyze your audio, video, and image files in order to extract valuable metadata. Version %%VERSION%%

Parameters:
    Email:
        Type: String
        Description: Your email address
        AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
    Size:
        Type: String
        Description: Amazon Elasticsearch cluster sizing
        Default: Small
        AllowedValues:
            - Small
            - Medium
            - Large
    Version:
        Type: String
        Description: Amazon Elasticsearch cluster version
        Default: '6.8'
        AllowedValues:
            - '6.8'

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Label:
                    default: "Solution Configuration"
                Parameters:
                    - Email
                    - Size
                    - Version
        ParameterLabels:
            Email:
                default: "Email address"
            Size:
                default: "Amazon Elasticsearch cluster sizing"
            Version:
                default: "Amazon Elasticsearch cluster version"

Mappings:
    Send:
        AnonymousUsage:
            Data: "No"
    SourceCode:
        General:
            S3Bucket: "%%BUCKET_NAME%%"
            KeyPrefix: "%%SOLUTION_NAME%%/%%VERSION%%"

Resources:
    VizonAnalysisBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        DependsOn: VizonAnalysisPermission
        Properties:
            BucketName: !Sub 'vizon-analysis-${AWS::Region}-${AWS::AccountId}'
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    -
                      ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256
            CorsConfiguration:
                CorsRules:
                  -
                    AllowedHeaders:
                      - '*'
                    AllowedMethods:
                      - 'PUT'
                      - 'GET'
                      - 'POST'
                    AllowedOrigins:
                      - '*'
                    ExposedHeaders:
                      - 'ETAG'
                    MaxAge: 3000
            NotificationConfiguration:
                LambdaConfigurations:
                    - Event: "s3:ObjectCreated:*"
                      Function: !GetAtt VizonAnalysisFunction.Arn
                      Filter:
                          S3Key:
                              Rules:
                                  - Name: prefix
                                    Value: 'private/'
            LoggingConfiguration:
              DestinationBucketName: !Ref Logs
              LogFilePrefix: vizon-analysis-logs

    VizonAnalysisWebsiteBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            WebsiteConfiguration:
                IndexDocument: "index.html"
                ErrorDocument: "index.html"
            LoggingConfiguration:
              DestinationBucketName: !Ref Logs
              LogFilePrefix: vizon-analysis-website-logs

    VizonAnalysisOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Sub "access-identity-${VizonAnalysisWebsiteBucket}"

    VizonAnalysisWebsiteBucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Metadata:
          cfn_nag:
            rules_to_suppress:
              - id: F16
                reason: "Public website bucket policy requires a wildcard principal"
        Properties:
            Bucket:
                Ref: "VizonAnalysisWebsiteBucket"
            PolicyDocument:
                Statement:
                  - Effect: "Allow"
                    Action:
                      - "s3:GetObject"
                    Resource:
                      - !Sub '${VizonAnalysisWebsiteBucket.Arn}/*'
                    Principal:
                      CanonicalUser: !GetAtt VizonAnalysisOriginAccessIdentity.S3CanonicalUserId

    Logs:
      DeletionPolicy: Retain
      Type: AWS::S3::Bucket
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W35
              reason: This S3 bucket is used as the logging destination for CloudFront and two other buckets created by this solution.
      Properties:
        AccessControl: LogDeliveryWrite

    VizonAnalysisWebsiteDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
            DistributionConfig:
                Comment: "Website distribution for %%SOLUTION_NAME%%"
                Origins:
                    -
                      Id: S3-solution-website
                      DomainName: !Sub "${VizonAnalysisWebsiteBucket}.s3.${AWS::Region}.amazonaws.com"
                      S3OriginConfig:
                        OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${VizonAnalysisOriginAccessIdentity}"
                DefaultCacheBehavior:
                    TargetOriginId: S3-solution-website
                    AllowedMethods:
                      - GET
                      - HEAD
                      - OPTIONS
                      - PUT
                      - POST
                      - DELETE
                      - PATCH
                    CachedMethods:
                        - GET
                        - HEAD
                        - OPTIONS
                    ForwardedValues:
                        QueryString: 'false'
                    ViewerProtocolPolicy: redirect-to-https
                DefaultRootObject: "index.html"
                CustomErrorResponses:
                  - ErrorCode: '404'
                    ResponsePagePath: "/index.html"
                    ResponseCode: '200'
                  - ErrorCode: '403'
                    ResponsePagePath: "/index.html"
                    ResponseCode: '200'
                IPV6Enabled: 'true'
                ViewerCertificate:
                    CloudFrontDefaultCertificate: 'true'
                Enabled: 'true'
                HttpVersion: 'http2'
                Logging:
                  IncludeCookies: 'false'
                  Bucket: !GetAtt Logs.DomainName
                  Prefix: cloudfront-logs/

    VizonAnalysisHelperRole:
        Type: AWS::IAM::Role
        Metadata:
          cfn_nag:
            rules_to_suppress:
              - id: W11
                reason: Refer to inline comments for the wildcard justification.
        Properties:
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Principal:
                    Service:
                      - "lambda.amazonaws.com"
                  Action:
                    - "sts:AssumeRole"
            Path: /
            Policies:
              -
                PolicyName: vizon-analysis-helper-policy
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      -
                        Effect: "Allow"
                        Action:
                          - "es:ESHttpPut"
                        # Wildcards on ElasticSearch domain resources are
                        # present because documents are indexed based off of
                        # the Step Function job ID, which is unique per
                        # invocation.
                        Resource: !Join ["", ["arn:aws:es:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":domain/vizon-analysis/*"]]
                      -
                        Effect: "Allow"
                        Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                        # The resource is limited to lambda log group only.
                        Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
                      -
                        Effect: "Allow"
                        Action:
                          - "s3:GetObject"
                        # This is only a read-only access to S3 buckets. This roles is used to
                        # download the solutions artifacts from the AWS Solutions bucket.
                        Resource: "arn:aws:s3:::*"
                      -
                        Effect: "Allow"
                        Action:
                          - "s3:PutObject"
                        # This resource is limited to a bucket created by this solution.
                        Resource: !Join ["", ["arn:aws:s3:::", !Ref VizonAnalysisWebsiteBucket, "/*"]]

    VizonAnalysisHelperFunction:
        Type: AWS::Lambda::Function
        Properties:
            Description: "AWS Lambda function to help the %%SOLUTION_NAME%% template"
            Code:
                S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], !Ref "AWS::Region"]]
                S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "vizon-analysis-helper.zip"]]
            Handler: index.handler
            Runtime: nodejs8.10
            Role: !GetAtt VizonAnalysisHelperRole.Arn
            Timeout: 900
            MemorySize: 256

    VizonAnalysisESHelper:
        Type: Custom::CreateIndex
        Properties:
            ServiceToken: !GetAtt VizonAnalysisHelperFunction.Arn
            customAction: "createIndex"
            clusterUrl: !GetAtt VizonAnalysisStorageStack.Outputs.EsCluster
            es_index: "vizon-analysis"
            es_version: !Ref Version

    GenerateUuid:
        Type: Custom::CreateUuid
        Properties:
            ServiceToken: !GetAtt VizonAnalysisHelperFunction.Arn
            customAction: "createUuid"

    SendConfiguration:
        Type: Custom::SendConfig
        Properties:
            ServiceToken: !GetAtt VizonAnalysisHelperFunction.Arn
            customAction: "sendConfig"
            uuid: !GetAtt GenerateUuid.uuid
            solutionId: SO0042
            version: 1
            size: !Ref Size
            metrics: !FindInMap ["Send", "AnonymousUsage", "Data"]

    CopyVizonAnalysisWebsite:
        Type: "Custom::CopyWebsite"
        Properties:
            ServiceToken: !GetAtt VizonAnalysisHelperFunction.Arn
            manifestKey: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"], "site-manifest.json"]]
            sourceS3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
            sourceS3key: !FindInMap ["SourceCode", "General", "KeyPrefix"]
            destS3Bucket: !Ref VizonAnalysisWebsiteBucket
            customAction: "copyS3assets"

    ConfigureVizonAnalysisWebsite:
        Type: "Custom::ConfigureWebsite"
        DependsOn: CopyVizonAnalysisWebsite
        Properties:
            ServiceToken: !GetAtt VizonAnalysisHelperFunction.Arn
            REGION: !Ref "AWS::Region"
            USERPOOLID: !Ref VizonAnalysisUserPool
            USERPOOLWEBCLIENTID: !Ref VizonAnalysisUserPoolClient
            IDENTITYPOOLID: !Ref VizonAnalysisIdentityPool
            BUCKET: !Ref VizonAnalysisBucket
            ENDPOINT: !Join ["", ["https://",!GetAtt VizonAnalysisApiStack.Outputs.ApiId, ".execute-api.", !Ref "AWS::Region", ".amazonaws.com/prod"]]
            CONSOLE_LINK: !Join ["", ["https://console.aws.amazon.com/states/home?region=", !Ref "AWS::Region", "#/executions/details/arn:aws:states:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", "execution:vizon-analysis-state-machine"]]
            destS3Bucket: !Ref VizonAnalysisWebsiteBucket
            destS3Key: "assets/media_analysis_config.js"
            customAction: "putConfig"

    VizonAnalysisStorageStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            TemplateURL: !Join ["/", ["https://s3.amazonaws.com", !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]] , !FindInMap ["SourceCode", "General", "KeyPrefix"], "vizon-analysis-storage-stack.template"]]
            Parameters:
                Size: !Ref Size
                Version: !Ref Version
                DomainName: vizon-analysis

    VizonAnalysisStateMachineStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            TemplateURL: !Join ["/", ["https://s3.amazonaws.com", !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]] , !FindInMap ["SourceCode", "General", "KeyPrefix"], "vizon-analysis-state-machine-stack.template"]]
            Parameters:
                VizonAnalysisFunction: !GetAtt VizonAnalysisFunction.Arn
                StateMachineName: vizon-analysis-state-machine

    VizonAnalysisApiStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            TemplateURL: !Join ["/", ["https://s3.amazonaws.com", !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]] , !FindInMap ["SourceCode", "General", "KeyPrefix"], "vizon-analysis-api-stack.template"]]
            Parameters:
                StateMachineArn: !Join ["", ["arn:aws:states:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":stateMachine:vizon-analysis-state-machine"]]
                DomainEndpoint: !GetAtt VizonAnalysisStorageStack.Outputs.EsCluster
                DomainVersion: !Ref Version
                S3Bucket: !Join ["", ["vizon-analysis-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]

    VizonRole:
      Type: AWS::IAM::Role
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W11
              reason: The S3 bucket in the resource is limited to a bucket created by this solution.
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "mediaconvert.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: /
        Policies:
          - PolicyName: vizon-analysis-mediaconvert-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                # Read input object
                - Effect: "Allow"
                  Action:
                    - s3:GetObject
                  Resource: !Sub 'arn:aws:s3:::vizon-analysis-${AWS::Region}-${AWS::AccountId}/*'

                # Write output object
                - Effect: "Allow"
                  Action:
                    - s3:PutObject
                  Resource: !Sub 'arn:aws:s3:::vizon-analysis-${AWS::Region}-${AWS::AccountId}/*'

    VizonAnalysisFunction:
        Type: AWS::Lambda::Function
        Properties:
            Description: "AWS Lambda function to execute analysis"
            Code:
                S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], !Ref "AWS::Region"]]
                S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "vizon-analysis-function.zip"]]
            Handler: index.handler
            Runtime: nodejs8.10
            Role: !GetAtt VizonAnalysisFunctionRole.Arn
            Timeout: 60
            MemorySize: 256
            Environment:
                Variables:
                    CONFIDENCE_SCORE: '0'
                    DOMAIN_ENDPOINT: !GetAtt VizonAnalysisStorageStack.Outputs.EsCluster
                    ES_INDEX: vizon-analysis
                    ES_VERSION: !Ref Version
                    S3_BUCKET: !Join ["", ["vizon-analysis-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
                    STATE_MACHINE: !Join ["", ["arn:aws:states:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":stateMachine:vizon-analysis-state-machine"]]
                    UUID: !GetAtt GenerateUuid.uuid
                    METRICS: !FindInMap ["Send", "AnonymousUsage", "Data"]
                    SOLUTIONID: SO0042
                    VIZON_ROLE: !GetAtt VizonRole.Arn

    VizonAnalysisFunctionRole:
        Type: AWS::IAM::Role
        Metadata:
          cfn_nag:
            rules_to_suppress:
              - id: W11
                reason: "Refer to inline comments for the wildcard justification."
        Properties:
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Principal:
                    Service:
                      - "lambda.amazonaws.com"
                  Action:
                    - "sts:AssumeRole"
            Path: /
            Policies:
              -
                PolicyName: vizon-analysis-function-policy
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      -
                        Effect: "Allow"
                        Action:
                          - "es:ESHttpPut"
                          - "es:ESHttpPost"
                        Resource:
                          # Wildcards on ElasticSearch domain resources are
                          # present because documents are indexed based off of
                          # the Step Function job ID, which is unique per
                          # invocation.
                          - !Join ["", ["arn:aws:es:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":domain/vizon-analysis/*"]]
                          - !Join ["", ["arn:aws:es:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":domain/vizon-analysis"]]
                      -
                        Effect: "Allow"
                        Action:
                          - "rekognition:CreateCollection"
                          - "rekognition:DetectFaces"
                          - "rekognition:DetectLabels"
                          - "rekognition:GetCelebrityRecognition"
                          - "rekognition:GetFaceDetection"
                          - "rekognition:GetFaceSearch"
                          - "rekognition:GetLabelDetection"
                          - "rekognition:GetPersonTracking"
                          - "rekognition:IndexFaces"
                          - "rekognition:RecognizeCelebrities"
                          - "rekognition:SearchFacesByImage"
                          - "rekognition:StartCelebrityRecognition"
                          - "rekognition:StartFaceDetection"
                          - "rekognition:StartFaceSearch"
                          - "rekognition:StartLabelDetection"
                          - "rekognition:StartPersonTracking"
                        # Wildcards in the Rekognition resource ARNs are present
                        # due to Rekognition needing access to collections that
                        # have IDs based off of a UUID generator.
                        # https://docs.aws.amazon.com/rekognition/latest/dg/api-permissions-reference.html
                        Resource: "*"
                      -
                        Effect: "Allow"
                        Action:
                          - "comprehend:BatchDetectEntities"
                          - "comprehend:BatchDetectKeyPhrases"
                        # These actions require resource wildcards per the
                        # Comprehend documentation.
                        # https://docs.aws.amazon.com/comprehend/latest/dg/comprehend-api-permissions-ref.html
                        Resource: "*"
                      -
                        Effect: "Allow"
                        Action:
                          - "transcribe:GetTranscriptionJob"
                          - "transcribe:StartTranscriptionJob"
                        # These actions require resource wildcards per the
                        # Transcribe documentation.
                        # https://docs.aws.amazon.com/transcribe/latest/dg/asc-api-permissions-ref.html
                        Resource: "*"
                      -
                        Effect: "Allow"
                        Action:
                          - "s3:GetObject"
                          - "s3:PutObject"
                          - "s3:DeleteObject"
                        Resource:
                          # The bucket name is constructed rather than referenced
                          # due to a circular dependency between the S3 Bucket
                          # and the Lambda events. The wildcard is present because
                          # the step function will need access to objects in the
                          # bucket that have a path based off of UUIDs.
                          - !Join ["", ["arn:aws:s3:::", "vizon-analysis-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId", "/*"]]
                      -
                        Effect: "Allow"
                        Action:
                          - "states:StartExecution"
                        Resource: !Join ["", ["arn:aws:states:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":stateMachine:vizon-analysis-state-machine"]]
                      -
                        Effect: "Allow"
                        Action:
                          - "mediaConvert:DescribeEndpoints"
                          - "mediaConvert:CreateJob"
                          - "mediaConvert:GetJob"
                        # This wildcard is present because the MediaConvert job
                        # IDs are randomly generated.
                        Resource: "*"
                      -
                        Effect: "Allow"
                        Action:
                          - "iam:GetRole"
                          - "iam:PassRole"
                        Resource: !GetAtt VizonRole.Arn

                      -
                        Effect: "Allow"
                        Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                        # This wildcard is present because we're letting the
                        # Lambda function name the CloudWatch log group.
                        # https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-identity-based-access-control-cwl.html
                        Resource: "*"

    VizonAnalysisPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt VizonAnalysisFunction.Arn
            Principal: s3.amazonaws.com
            SourceAccount: !Ref AWS::AccountId
            SourceArn: !Sub 'arn:aws:s3:::vizon-analysis-${AWS::Region}-${AWS::AccountId}'

    VizonAnalysisCongitoAuthenticatedRole:
      Type: "AWS::IAM::Role"
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W11
              reason: The resources in the policy are created/managed by this solution.
      Properties:
          AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                  -
                      Effect: "Allow"
                      Principal:
                          Federated: "cognito-identity.amazonaws.com"
                      Action:
                              - "sts:AssumeRoleWithWebIdentity"
                      Condition:
                          StringEquals:
                              cognito-identity.amazonaws.com:aud: !Ref VizonAnalysisIdentityPool
                          ForAnyValue:StringLike:
                              cognito-identity.amazonaws.com:amr: "authenticated"
          Path: "/"
          Policies:
            -
              PolicyName: !Join ["-",["vizon-analysis-auth-policy",!Ref "AWS::Region"]]
              PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                      -
                          Effect: "Allow"
                          Action:
                            - "cognito-identity:GetId"
                          Resource:
                            - !Join ["",["arn:aws:cognito-identity:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":identitypool/", !Ref VizonAnalysisIdentityPool]]
                      -
                          Effect: "Allow"
                          Action:
                            - "s3:PutObject"
                            - "s3:GetObject"
                            - "s3:DeleteObject"
                          Resource:
                            - !Join ["",["arn:aws:s3:::", !Ref VizonAnalysisBucket, "/private/${cognito-identity.amazonaws.com:sub}/*"]]
                      -
                          Effect: "Allow"
                          Action:
                            - "execute-api:Invoke"
                          Resource:
                            - !Join ["",["arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !GetAtt VizonAnalysisApiStack.Outputs.ApiId, "/prod/*/*"]]

    VizonAnalysisIdentityPoolRoleAttachment:
        Type: "AWS::Cognito::IdentityPoolRoleAttachment"
        Properties:
            IdentityPoolId: !Ref VizonAnalysisIdentityPool
            Roles:
                authenticated: !GetAtt VizonAnalysisCongitoAuthenticatedRole.Arn

    VizonAnalysisIdentityPool:
        Type: "AWS::Cognito::IdentityPool"
        Properties:
            IdentityPoolName: media_analysis_identity_pool
            AllowUnauthenticatedIdentities: false
            CognitoIdentityProviders:
                -
                  ClientId: !Ref VizonAnalysisUserPoolClient
                  ProviderName: !GetAtt VizonAnalysisUserPool.ProviderName
                  ServerSideTokenCheck: false

    VizonAnalysisUserPoolClient:
        Type: "AWS::Cognito::UserPoolClient"
        Properties:
            ClientName: "media_analysis_app"
            RefreshTokenValidity: 30
            UserPoolId: !Ref VizonAnalysisUserPool

    VizonAnalysisUser:
        Type: "AWS::Cognito::UserPoolUser"
        DependsOn: [VizonAnalysisStorageStack, VizonAnalysisStateMachineStack, VizonAnalysisApiStack, VizonAnalysisWebsiteBucketPolicy]
        Properties:
            DesiredDeliveryMediums:
                - EMAIL
            ForceAliasCreation: false
            UserAttributes:
                -
                  Name: email
                  Value: !Ref Email
            Username: !Join [".", !Split ["@", !Ref Email]]
            UserPoolId: !Ref VizonAnalysisUserPool

    VizonAnalysisUserPool:
        Type: "AWS::Cognito::UserPool"
        Properties:
            AdminCreateUserConfig:
                AllowAdminCreateUserOnly: true
                InviteMessageTemplate:
                  EmailSubject: "Your %%SOLUTION_NAME%% demo login"
                  EmailMessage:
                    !Sub |
                        <p>You are invited to join the %%SOLUTION_NAME%% demo page. Your credentials are:</p>
                        <p>
                        Username: <strong>{username}</strong><br />
                        Password: <strong>{####}</strong>
                        </p>
                        <p>
                        Please sign in with the user name and your temporary password provided above at: <br />
                        https://${VizonAnalysisWebsiteDistribution.DomainName}
                        </p>
            AliasAttributes:
                - email
            AutoVerifiedAttributes:
                - email
            MfaConfiguration: 'OFF'
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
                    RequireLowercase: true
                    RequireNumbers: true
                    RequireSymbols: false
                    RequireUppercase: true
            UserPoolName: media_analysis_user_pool

Outputs:
    DemoWebsite:
        Description: "Vizon Analysis Demo Website URL"
        Value: !Sub https://${VizonAnalysisWebsiteDistribution.DomainName}
    VizonAnalysisApiEndpoint:
        Description: "Vizon Analysis API Gateway Endpoint"
        Value: !Join ["", ["https://",!GetAtt VizonAnalysisApiStack.Outputs.ApiId, ".execute-api.", !Ref "AWS::Region", ".amazonaws.com/prod"]]
    SolutionUUID:
        Description: "Solution UUID"
        Value: !GetAtt GenerateUuid.uuid
    VizonAnalysisUserPoolId:
        Description: "Vizon Analysis User Pool ID"
        Value: !Ref VizonAnalysisUserPool
    VizonAnalysisDemoWebsiteClientId:
        Description: "Vizon Analysis Demo Website Client ID"
        Value: !Ref VizonAnalysisUserPoolClient
    VizonAnalysisIdentityPool:
        Description: "Vizon Analysis Identity Pool"
        Value: !Ref VizonAnalysisIdentityPool
    SolutionVersion:
      Description: Version Number
      Value: %%VERSION%%
